openapi: '3.0.0'
info:
  description: 'Documentation for Movie App API'
  version: '1.0.0'
  title: 'Movie App API'
paths:
##############################################################
##############################################################
  /:
    get:
      summary: 'Get information [name/description/version] about the API'
      tags:
        - 'API status'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  name:
                    type: 'string'
                  description:
                    type: 'string'
                  version:
                    type: 'string'

  /health:
    get:
      summary: 'Get an "ok" if the API is online'
      tags:
        - 'API status'
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: 'string'
                
##############################################################
##############################################################

  /items:
    get:
      summary: 'Get a list of registered items'
      tags:
        - Item
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
        - name: category
          in: query
          schema:
            type: string
          description: Category
        - name: q
          in: query
          schema:
            type: string
          description: Filter items that matches the text
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfItems'
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: 'Add an item'
      tags:
        - Item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized' 
        404:
          $ref: '#/components/responses/NotFound'
          
  /items/{itemId}:
    get:
      summary: 'Get an item by its id'
      tags:
        - Item
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
          description: Category
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        401:
          $ref: '#/components/responses/Unauthorized'            
    put:
      summary: 'Updates an item'
      tags:
        - Item
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: string
          description: Category
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                category:
                  type: string
                imageUrl:
                  type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
  
##############################################################
##############################################################

  /categories:
    get:
      summary: 'Get a list of registered categories'
      tags:
        - Category
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfCategories'
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: 'Add a category'
      tags:
        - Category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized' 
        404:
          $ref: '#/components/responses/NotFound'
  /categories/{categoryId}:
    get:
      summary: 'Get a category by its id'
      tags:
        - Category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
          description: Category
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        401:
          $ref: '#/components/responses/Unauthorized'            
    put:
      summary: 'Updates a category'
      tags:
        - Category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
          description: Category
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
 
##############################################################
##############################################################

  /users:
    get:
      summary: 'Get a list of registered users'
      tags:
        - User
      parameters:
        - $ref: '#/components/parameters/offset'
        - $ref: '#/components/parameters/limit'
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfUsers'
        401:
          $ref: '#/components/responses/Unauthorized'
    post:
      summary: 'Add an user'
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized' 
        404:
          $ref: '#/components/responses/NotFound'
  /users/{userId}:
    get:
      summary: 'Get an user by its id'
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: User
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/Unauthorized'            
    put:
      summary: 'Updates an user'
      tags:
        - User
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
          description: User
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
 
##############################################################
##############################################################

components:
  schemas:
    ArrayOfUsers:
      type: array
      items:
        $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
    ArrayOfCategories:
      type: array
      items:
        $ref: '#/components/schemas/Category'
    Category:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
          
    ArrayOfItems:
      type: array
      items:
        $ref: '#/components/schemas/Item'
    Item:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        category:
          type: object
          properties:
            _id:
              type: string
            name:
              type: string
        imageUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    DefaultBadRequest:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
          
  responses:
    Unauthorized:
      description: 'Unauthorized'
    BadRequest:
      description: 'Bad request'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DefaultBadRequest'
    NotFound:
      description: 'Resource not found'
      
  parameters:
    limit:
      in: query
      name: limit
      schema:
        type: integer
      description: Max number of items to return
    offset:
      in: query
      name: offset
      schema:
        type: integer
      description: Number of items to skip before returning the values